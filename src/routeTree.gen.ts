/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BaseImport } from './routes/_base'
import { Route as BaseRegistrationSuccessRouteImport } from './routes/_base/registration.success/route'

// Create Virtual Routes

const BaseIndexLazyImport = createFileRoute('/_base/')()
const BaseCheckLazyImport = createFileRoute('/_base/check')()

// Create/Update Routes

const BaseRoute = BaseImport.update({
  id: '/_base',
  getParentRoute: () => rootRoute,
} as any)

const BaseIndexLazyRoute = BaseIndexLazyImport.update({
  path: '/',
  getParentRoute: () => BaseRoute,
} as any).lazy(() => import('./routes/_base/index.lazy').then((d) => d.Route))

const BaseCheckLazyRoute = BaseCheckLazyImport.update({
  path: '/check',
  getParentRoute: () => BaseRoute,
} as any).lazy(() => import('./routes/_base/check.lazy').then((d) => d.Route))

const BaseRegistrationSuccessRouteRoute =
  BaseRegistrationSuccessRouteImport.update({
    path: '/registration/success',
    getParentRoute: () => BaseRoute,
  } as any).lazy(() =>
    import('./routes/_base/registration.success/route.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_base': {
      id: '/_base'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BaseImport
      parentRoute: typeof rootRoute
    }
    '/_base/check': {
      id: '/_base/check'
      path: '/check'
      fullPath: '/check'
      preLoaderRoute: typeof BaseCheckLazyImport
      parentRoute: typeof BaseImport
    }
    '/_base/': {
      id: '/_base/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof BaseIndexLazyImport
      parentRoute: typeof BaseImport
    }
    '/_base/registration/success': {
      id: '/_base/registration/success'
      path: '/registration/success'
      fullPath: '/registration/success'
      preLoaderRoute: typeof BaseRegistrationSuccessRouteImport
      parentRoute: typeof BaseImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  BaseRoute: BaseRoute.addChildren({
    BaseCheckLazyRoute,
    BaseIndexLazyRoute,
    BaseRegistrationSuccessRouteRoute,
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_base"
      ]
    },
    "/_base": {
      "filePath": "_base.tsx",
      "children": [
        "/_base/check",
        "/_base/",
        "/_base/registration/success"
      ]
    },
    "/_base/check": {
      "filePath": "_base/check.lazy.tsx",
      "parent": "/_base"
    },
    "/_base/": {
      "filePath": "_base/index.lazy.tsx",
      "parent": "/_base"
    },
    "/_base/registration/success": {
      "filePath": "_base/registration.success/route.tsx",
      "parent": "/_base"
    }
  }
}
ROUTE_MANIFEST_END */
